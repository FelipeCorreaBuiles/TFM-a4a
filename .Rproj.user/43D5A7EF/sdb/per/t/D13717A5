{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n# \n# http://www.rstudio.com/shiny/\n#\n\nlibrary(shiny)\nsource(\"chooser.R\")\n\n# By default, the file size limit is 5MB. It can be changed by\n# setting this option. Here we'll raise limit to 9MB.\noptions(shiny.maxRequestSize = 100*1024^2)\n\n\nshinyServer(function(input, output, session) {\n  \n  readfile<-eventReactive(input$leerArchivo,{\n    inFile<-input$file1\n    \n    if (is.null(inFile))\n      return(NULL)\n    separador=input$sep\n    \n    if(separador=='otro'){\n      separador=input$otro_sep\n    }\n   \n      read.csv(inFile$datapath, header = input$header,\n             sep = separador, quote = input$quote,dec = input$decimal,stringsAsFactors=input$string_as_factors)\n    \n  })\n  output$contents <- renderDataTable({\n    # input$file1 will be NULL initially. After the user selects\n    # and uploads a file, it will be a data frame with 'name',\n    # 'size', 'type', and 'datapath' columns. The 'datapath'\n    # column will contain the local filenames where the data can\n    # be found.\n     data<- readfile() \n   #head(data, 20)\n   \n  })\n  output$VarControls <- renderUI({\n      #if(is.null(input$variables)){ \n    colnames <- names(readfile())\n    #}else{\n     # colnames <-input$variables\n    #}\n    checkboxGroupInput(\"variables\", \"Seleccione las variables que van a ser utilizadas en el modelo o que son utiles\", choices = colnames,selected = colnames)\n    \n  })\n  output$groupby <- renderUI({\n    colnames <- input$variables\n    checkboxGroupInput(\"groupby\", \"Campos de Agrupación\", choices = input$variables)\n    \n  })\n  \n  output$aggregationColumns <- renderUI({\n    \n    checkboxGroupInput(\"aggregationColumns\", \"Columnas a Calcular\", choices = input$variables)\n    \n  })\n  \n  output$aggMethods <- renderUI({\n    colnames <- input$variables\n    checkboxGroupInput(\"aggMethods\", \"Selecciona la funcion de Agregación\", choices = c('Sum','Mean','SD','Count'))\n    \n  })\n  \n  output$contents_pre<-renderTable({\n    # input$file1 will be NULL initially. After the user selects\n    # and uploads a file, it will be a data frame with 'name',\n    # 'size', 'type', and 'datapath' columns. The 'datapath'\n    # column will contain the local filenames where the data can\n    # be found.\n    \n    data<- readfile()\n    data<-data[input$variables]\n    head(data, 20)\n    \n  })\n  output$summary_vars<-renderTable({\n    summary(readfile())\n  })\n  output$summary<-renderTable({\n    applyAggreg()\n  })\n  \n  applyAggreg<-eventReactive(input$ApplyAgg,{\n    sALL(readfile(),input)\n  })\n  output$ModelVarControls <- renderUI({\n   \n    if(is.null(input$aggMethods)){ \n        colnames <-input$variables\n      }else{\n        colnames <-names(applyAggreg())\n      }\n    \n    checkboxGroupInput(\"model_variables\", \"Seleccione las variables que serán utilizadas en el Modelo a entrenar\", choices = colnames,selected = colnames)\n    \n  })\n  transform_model_data<-eventReactive(input$do_model_var_transform,{\n    if(is.null(input$aggMethods)){ \n      data<- readfile()\n    }else{\n      data <- applyAggreg()\n    }\n    \n    data = data[input$model_variables]\n    print(data)\n    \n    if(input$nulos==TRUE){  \n      print(\"Quitar nulos\")\n      data<-data[complete.cases(final),]      \n    }\n    \n    \n    if(input$scale==TRUE){  \n      print(\"Escalar\")\n       data<-scale(data)        \n    }\n    print(data)\n    return(data)\n    \n  })\n  \n  \n  cluster_test<-eventReactive(input$do_cluster_test,{\n    set.seed(-1785)\n    number_clusters_validation_I <- input$number_clusters_validation[1]\n    number_clusters_validation_F <- input$number_clusters_validation[2]\n    #print(number_clusters_validation_I)\n    #print(number_clusters_validation_F)\n    #if(is.null(input$variables)){        \n     # subset<-dataset\n    #}else{\n    #  subset<-dataset[input$variables]\n      \n    #}\n    \n    #if(scale_on==TRUE){        \n    #  subset<-scale(subset)        \n   # }\n    data <-transform_model_data()\n    subset<-data[input$model_variables]\n    print(input$variables)\n    wss <- (nrow(subset)-1)*sum(apply(subset,2,var))\n    for (i in number_clusters_validation_I:number_clusters_validation_F) wss[i] <- sum(kmeans(subset, \n                                                                 centers=i)$withinss)\n    plot(1:number_clusters_validation_F, wss, type=\"b\", xlab=\"Number of Clusters\",\n         ylab=\"Within Groups Sum of Squares\")\n  })\n  output$numberOfClusters<-renderPlot({\n    cluster_test()\n  })\n  \n  #output$tabs<-input$tabs\n})\nsALL<-function(data,input){\n  \n  library(doBy)\n  \n  if(length(input$aggMethods)  == 1){\n    \n    if(is.element('Sum',input$aggMethods)){\n      return (summaryBy(list(input$aggregationColumns,input$groupby), data = data, \n                FUN = function(x) { c(sum = sum(x)) } ))\n      \n    }\n    if(is.element('Mean',input$aggMethods)){\n      return (summaryBy(list(input$aggregationColumns,input$groupby), data = data, \n                FUN = function(x) { c(mean = mean(x,na.rm = TRUE)) } ))\n    }\n    if(is.element('SD',input$aggMethods)){\n      return (summaryBy(list(input$aggregationColumns,input$groupby), data = data, \n                FUN = function(x) { c(sd = sd(x,na.rm = TRUE)) } ))\n    }\n    if(is.element('Count',input$aggMethods)){\n      return (summaryBy(list(input$aggregationColumns,input$groupby), data = data, \n                FUN = function(x) { c(count = length(x)) } ))\n    }\n  }else\n  {\n    if(length(input$aggMethods)==2 ){\n      \n      \n      if(is.element('Sum',input$aggMethods)& is.element('Count',input$aggMethods)){\n        return (summaryBy(list(input$aggregationColumns,input$groupby), data = data, \n                          FUN = function(x) { c(sum = sum(x),count = length(x)) } ))\n      }\n      \n      if(is.element('Sum',input$aggMethods)& is.element('Mean',input$aggMethods)){\n        return (summaryBy(list(input$aggregationColumns,input$groupby), data = data, \n                          FUN = function(x) { c(sum = sum(x),mean = mean(x,na.rm = TRUE)) } ))\n      }\n      \n      if(is.element('Sum',input$aggMethods)& is.element('SD',input$aggMethods)){\n        return (summaryBy(list(input$aggregationColumns,input$groupby), data = data, \n                          FUN = function(x) { c(sum = sum(x),sd = sd(x,na.rm = TRUE)) } ))\n      }\n      \n      if(is.element('Mean',input$aggMethods)& is.element('Count',input$aggMethods)){\n        return (summaryBy(list(input$aggregationColumns,input$groupby), data = data, \n                          FUN = function(x) { c(mean = mean(x,na.rm = TRUE),count = length(x)) } ))\n      }\n      \n      if(is.element('SD',input$aggMethods)& is.element('Count',input$aggMethods)){\n        return (summaryBy(list(input$aggregationColumns,input$groupby), data = data, \n                          FUN = function(x) { c(sd = sd(x,na.rm = TRUE),count = length(x)) } ))\n      }\n      \n      if(is.element('Mean',input$aggMethods)& is.element('SD',input$aggMethods)){\n        return (summaryBy(list(input$aggregationColumns,input$groupby), data = data, \n                          FUN = function(x) { c(mean = mean(x,na.rm = TRUE),sd = sd(x,na.rm = TRUE)) } ))\n      }\n    }else{\n      if(length(input$aggMethods)==3){\n        \n        if(is.element('Sum',input$aggMethods) & is.element('Count',input$aggMethods) & is.element('Mean',input$aggMethods)){\n          return (summaryBy(list(input$aggregationColumns,input$groupby), data = data, \n                            FUN = function(x) { c(sum = sum(x),count = length(x),mean = mean(x,na.rm = TRUE)) } ))\n        }\n        \n        if(is.element('Sum',input$aggMethods) & is.element('Count',input$aggMethods) & is.element('SD',input$aggMethods)){\n          return (summaryBy(list(input$aggregationColumns,input$groupby), data = data, \n                            FUN = function(x) { c(sum = sum(x),count = length(x),sd = sd(x,na.rm = TRUE)) } ))\n        }\n        \n        if(is.element('Mean',input$aggMethods) & is.element('Count',input$aggMethods) & is.element('SD',input$aggMethods)){\n          return (summaryBy(list(input$aggregationColumns,input$groupby), data = data, \n                            FUN = function(x) { c(mean = mean(x,na.rm = TRUE),count = length(x),sd = sd(x,na.rm = TRUE)) } ))\n        }\n       \n        if(is.element('Mean',input$aggMethods) & is.element('Sum',input$aggMethods) & is.element('SD',input$aggMethods)){\n          return (summaryBy(list(input$aggregationColumns,input$groupby), data = data, \n                            FUN = function(x) { c(sum = sum(x),mean = mean(x,na.rm = TRUE),sd = sd(x,na.rm = TRUE)) } ))\n        }\n      }else{\n        if(length(input$aggMethods)==4){\n          \n          if(is.element('Sum',input$aggMethods) & is.element('Count',input$aggMethods) & is.element('Mean',input$aggMethods) & is.element('SD',input$aggMethods)){\n            return (summaryBy(list(input$aggregationColumns,input$groupby), data = data, \n                              FUN = function(x) { c(sum = sum(x),count = length(x),mean = mean(x,na.rm = TRUE),sd = sd(x,na.rm = TRUE)) } ))\n          }\n        }else{\n          \n        }\n      }\n    }\n  }\n}\n\n\n",
    "created" : 1447896944038.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "159|27|251|0|\n",
    "hash" : "2264196577",
    "id" : "D13717A5",
    "lastKnownWriteTime" : 1447992212,
    "path" : "C:/Users/Silvana Lopez/Desktop/shiny/OperacionesInusuales/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}